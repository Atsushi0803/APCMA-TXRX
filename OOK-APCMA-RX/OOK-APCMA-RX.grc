options:
  parameters:
    author: Atsushi.N
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: OOK_APCMA_RX
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: APCMA_Demodulation
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: Bits_Per_Symbol
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 132.0]
    rotation: 0
    state: enabled
- name: Slot_Length
  id: variable
  parameters:
    comment: ''
    value: '128'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 132.0]
    rotation: 0
    state: enabled
- name: Sub_Slot_Rate
  id: variable
  parameters:
    comment: ''
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 132.0]
    rotation: 0
    state: enabled
- name: Threshold
  id: variable
  parameters:
    comment: ''
    value: '0.2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 132.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '250000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 20.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 232.0]
    rotation: 0
    state: true
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: C:\Users\Atsushi.N\Desktop\wav_sink\data1.wav
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 376.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport math\n\n\n\
      class SignalDetection(gr.decim_block):\n    def __init__(self, slot_length=128,\
      \ sub_slot_rate=8, threshold=0.2):\n        gr.decim_block.__init__(\n     \
      \       self,\n            name='Signal Detection',\n            in_sig=[np.float32,\
      \ np.float32],\n            out_sig=[np.float32],\n            decim=slot_length/sub_slot_rate)\n\
      \n        self.decim = int(slot_length/sub_slot_rate)\n        self.set_relative_rate(sub_slot_rate/slot_length)\n\
      \        self.threshold = threshold\n\n    def work(self, input_items, output_items):\n\
      \        tmp = [(abs(input_items[0][i]) > 0.1) or (abs(input_items[1][i]) >\
      \ 0.1) for i in range(len(input_items[0]))]\n        output_items[0][:] = [sum(tmp[i\
      \ * self.decim:(i + 1) * self.decim]) > self.decim * 0.5 for i in range(len(output_items[0][:]))]\n\
      \        return len(output_items[0][:])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    slot_length: Slot_Length
    sub_slot_rate: Sub_Slot_Rate
    threshold: Threshold
  states:
    _io_cache: ('Signal Detection', 'SignalDetection', [('slot_length', '128'), ('sub_slot_rate',
      '8'), ('threshold', '0.2')], [('0', 'float', 1), ('1', 'float', 1)], [('0',
      'float', 1)], '', ['threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 220.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    Sub_slot_rate: Sub_Slot_Rate
    _source_code: "import numpy as np\nfrom gnuradio import gr\n\n\nclass PulseDetection(gr.decim_block):\n\
      \    def __init__(self, Sub_slot_rate=8):\n        gr.decim_block.__init__(\n\
      \            self,\n            name='Pulse Detection',\n            in_sig=[np.float32],\n\
      \            out_sig=[np.float32],\n            decim = Sub_slot_rate)\n   \
      \     self.decim = Sub_slot_rate\n        self.set_relative_rate(1.0/Sub_slot_rate)\n\
      \n    def work(self, input_items, output_items):\n        output_items[0][:]\
      \ = [sum(input_items[0][j+self.decim*i] > 0.5 for j in range(self.decim)) >\
      \ self.decim * 0.5 for i in range(len(output_items[0][:]))]\n        return\
      \ len(output_items[0][:])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Pulse Detection', 'PulseDetection', [('Sub_slot_rate', '8')], [('0',
      'float', 1)], [('0', 'float', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 240.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "# -*- coding: utf-8 -*-\nimport numpy as np\nfrom gnuradio import\
      \ gr\n\n\nclass ApcmaDecode(gr.sync_block):\n    def __init__(self, bits_per_symbol=4):\n\
      \        gr.sync_block.__init__(\n            self,\n            name='Decoding\
      \ APCMA',\n            in_sig=[np.float32],\n            out_sig=None\n    \
      \    )\n\n        self.bits_per_symbol = bits_per_symbol  # [bits/symbol]\n\
      \        self.number_of_slot = 2 ** (self.bits_per_symbol + 1) + 5\n       \
      \ self.ApcmaCode = [[0] * self.number_of_slot for i in range(2 ** self.bits_per_symbol)]\n\
      \        for i in range(2 ** self.bits_per_symbol):\n            self.ApcmaCode[i][0]\
      \ = 1\n            self.ApcmaCode[i][i + 2] = 1\n            self.ApcmaCode[i][-\
      \ i - 3] = 1\n            self.ApcmaCode[i][-1] = 1\n\n        self.PulseList\
      \ = np.zeros(self.number_of_slot)\n\n    def work(self, input_items, output_items):\n\
      \        for i in range(len(input_items[0][:])):\n            self.PulseList\
      \ = np.append(self.PulseList[1:], input_items[0][i])\n            # print(self.PulseList)\n\
      \            for j in range(len(self.ApcmaCode)):\n                if np.all(np.logical_and(self.ApcmaCode[j][:],\
      \ self.PulseList) == self.ApcmaCode[j][:]):\n                    # print(\"\
      Word:{}\".format(j + 1))\n                    with open('C:\\\\Users\\\\Atsushi.N\\\
      Desktop\\\\Output.txt', 'a') as f:\n                        f.write(f'{j+1}\\\
      n')\n        return 0\n"
    affinity: ''
    alias: ''
    bits_per_symbol: Bits_Per_Symbol
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Decoding APCMA', 'ApcmaDecode', [('bits_per_symbol', '4')], [('0',
      'float', 1)], [], '', ['bits_per_symbol'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 240.0]
    rotation: 0
    state: true
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: TX/RX
    ant1: RX2
    ant10: RX2
    ant11: RX2
    ant12: RX2
    ant13: RX2
    ant14: RX2
    ant15: RX2
    ant16: RX2
    ant17: RX2
    ant18: RX2
    ant19: RX2
    ant2: RX2
    ant20: RX2
    ant21: RX2
    ant22: RX2
    ant23: RX2
    ant24: RX2
    ant25: RX2
    ant26: RX2
    ant27: RX2
    ant28: RX2
    ant29: RX2
    ant3: RX2
    ant30: RX2
    ant31: RX2
    ant4: RX2
    ant5: RX2
    ant6: RX2
    ant7: RX2
    ant8: RX2
    ant9: RX2
    bw0: '200000'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: '924000000'
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs_enb0: '""'
    dc_offs_enb1: '""'
    dc_offs_enb10: '""'
    dc_offs_enb11: '""'
    dc_offs_enb12: '""'
    dc_offs_enb13: '""'
    dc_offs_enb14: '""'
    dc_offs_enb15: '""'
    dc_offs_enb16: '""'
    dc_offs_enb17: '""'
    dc_offs_enb18: '""'
    dc_offs_enb19: '""'
    dc_offs_enb2: '""'
    dc_offs_enb20: '""'
    dc_offs_enb21: '""'
    dc_offs_enb22: '""'
    dc_offs_enb23: '""'
    dc_offs_enb24: '""'
    dc_offs_enb25: '""'
    dc_offs_enb26: '""'
    dc_offs_enb27: '""'
    dc_offs_enb28: '""'
    dc_offs_enb29: '""'
    dc_offs_enb3: '""'
    dc_offs_enb30: '""'
    dc_offs_enb31: '""'
    dc_offs_enb4: '""'
    dc_offs_enb5: '""'
    dc_offs_enb6: '""'
    dc_offs_enb7: '""'
    dc_offs_enb8: '""'
    dc_offs_enb9: '""'
    dev_addr: '""'
    dev_args: '""'
    gain0: '10'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    iq_imbal_enb0: '""'
    iq_imbal_enb1: '""'
    iq_imbal_enb10: '""'
    iq_imbal_enb11: '""'
    iq_imbal_enb12: '""'
    iq_imbal_enb13: '""'
    iq_imbal_enb14: '""'
    iq_imbal_enb15: '""'
    iq_imbal_enb16: '""'
    iq_imbal_enb17: '""'
    iq_imbal_enb18: '""'
    iq_imbal_enb19: '""'
    iq_imbal_enb2: '""'
    iq_imbal_enb20: '""'
    iq_imbal_enb21: '""'
    iq_imbal_enb22: '""'
    iq_imbal_enb23: '""'
    iq_imbal_enb24: '""'
    iq_imbal_enb25: '""'
    iq_imbal_enb26: '""'
    iq_imbal_enb27: '""'
    iq_imbal_enb28: '""'
    iq_imbal_enb29: '""'
    iq_imbal_enb3: '""'
    iq_imbal_enb30: '""'
    iq_imbal_enb31: '""'
    iq_imbal_enb4: '""'
    iq_imbal_enb5: '""'
    iq_imbal_enb6: '""'
    iq_imbal_enb7: '""'
    iq_imbal_enb8: '""'
    iq_imbal_enb9: '""'
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    norm_gain0: 'False'
    norm_gain1: 'False'
    norm_gain10: 'False'
    norm_gain11: 'False'
    norm_gain12: 'False'
    norm_gain13: 'False'
    norm_gain14: 'False'
    norm_gain15: 'False'
    norm_gain16: 'False'
    norm_gain17: 'False'
    norm_gain18: 'False'
    norm_gain19: 'False'
    norm_gain2: 'False'
    norm_gain20: 'False'
    norm_gain21: 'False'
    norm_gain22: 'False'
    norm_gain23: 'False'
    norm_gain24: 'False'
    norm_gain25: 'False'
    norm_gain26: 'False'
    norm_gain27: 'False'
    norm_gain28: 'False'
    norm_gain29: 'False'
    norm_gain3: 'False'
    norm_gain30: 'False'
    norm_gain31: 'False'
    norm_gain4: 'False'
    norm_gain5: 'False'
    norm_gain6: 'False'
    norm_gain7: 'False'
    norm_gain8: 'False'
    norm_gain9: 'False'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: pc_clock
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 172.0]
    rotation: 0
    state: disabled

connections:
- [blocks_complex_to_float_0, '0', epy_block_0, '0']
- [blocks_complex_to_float_0, '1', epy_block_0, '1']
- [blocks_file_source_0, '0', blocks_complex_to_float_0, '0']
- [epy_block_0, '0', epy_block_1, '0']
- [epy_block_1, '0', epy_block_2, '0']
- [uhd_usrp_source_0, '0', blocks_complex_to_float_0, '0']

metadata:
  file_format: 1
